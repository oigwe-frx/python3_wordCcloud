{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Final Project - Word Cloud"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this project, you'll create a \"word cloud\" from a text by writing a script.  This script needs to process the text, remove punctuation, ignore case and words that do not contain all alphabets, count the frequencies, and ignore uninteresting or irrelevant words.  A dictionary is the output of the `calculate_frequencies` function.  The `wordcloud` module will then generate the image from your dictionary."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the input text of your script, you will need to provide a file that contains text only.  For the text itself, you can copy and paste the contents of a website you like.  Or you can use a site like [Project Gutenberg](https://www.gutenberg.org/) to find books that are available online.  You could see what word clouds you can get from famous books, like a Shakespeare play or a novel by Jane Austen. Save this as a .txt file somewhere on your computer.\n",
    "<br><br>\n",
    "Now you will need to upload your input file here so that your script will be able to process it.  To do the upload, you will need an uploader widget.  Run the following cell to perform all the installs and imports for your word cloud script and uploader widget.  It may take a minute for all of this to run and there will be a lot of output messages. But, be patient. Once you get the following final line of output, the code is done executing. Then you can continue on with the rest of the instructions for this notebook.\n",
    "<br><br>\n",
    "**Enabling notebook extension fileupload/extension...**\n",
    "<br>\n",
    "**- Validating: <font color =green>OK</font>**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: wordcloud in /opt/conda/lib/python3.6/site-packages (1.8.1)\n",
      "Requirement already satisfied: matplotlib in /opt/conda/lib/python3.6/site-packages (from wordcloud) (3.0.3)\n",
      "Requirement already satisfied: pillow in /opt/conda/lib/python3.6/site-packages (from wordcloud) (5.4.1)\n",
      "Requirement already satisfied: numpy>=1.6.1 in /opt/conda/lib/python3.6/site-packages (from wordcloud) (1.15.4)\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.6/site-packages (from matplotlib->wordcloud) (0.10.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.6/site-packages (from matplotlib->wordcloud) (1.0.1)\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /opt/conda/lib/python3.6/site-packages (from matplotlib->wordcloud) (2.3.1)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /opt/conda/lib/python3.6/site-packages (from matplotlib->wordcloud) (2.8.0)\n",
      "Requirement already satisfied: six in /opt/conda/lib/python3.6/site-packages (from cycler>=0.10->matplotlib->wordcloud) (1.12.0)\n",
      "Requirement already satisfied: setuptools in /opt/conda/lib/python3.6/site-packages (from kiwisolver>=1.0.1->matplotlib->wordcloud) (40.8.0)\n",
      "Requirement already satisfied: fileupload in /opt/conda/lib/python3.6/site-packages (0.1.5)\n",
      "Requirement already satisfied: notebook>=4.2 in /opt/conda/lib/python3.6/site-packages (from fileupload) (5.7.5)\n",
      "Requirement already satisfied: ipywidgets>=5.1 in /opt/conda/lib/python3.6/site-packages (from fileupload) (7.4.2)\n",
      "Requirement already satisfied: traitlets>=4.2 in /opt/conda/lib/python3.6/site-packages (from fileupload) (4.3.2)\n",
      "Requirement already satisfied: ipython-genutils in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (0.2.0)\n",
      "Requirement already satisfied: jinja2 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (2.10)\n",
      "Requirement already satisfied: jupyter-client>=5.2.0 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (5.2.4)\n",
      "Requirement already satisfied: Send2Trash in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (1.5.0)\n",
      "Requirement already satisfied: pyzmq>=17 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (18.0.1)\n",
      "Requirement already satisfied: nbformat in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (4.4.0)\n",
      "Requirement already satisfied: nbconvert in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (5.4.1)\n",
      "Requirement already satisfied: ipykernel in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (5.1.0)\n",
      "Requirement already satisfied: terminado>=0.8.1 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (0.8.1)\n",
      "Requirement already satisfied: prometheus-client in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (0.6.0)\n",
      "Requirement already satisfied: jupyter-core>=4.4.0 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (4.4.0)\n",
      "Requirement already satisfied: tornado<7,>=4.1 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.2->fileupload) (6.0.2)\n",
      "Requirement already satisfied: ipython>=4.0.0; python_version >= \"3.3\" in /opt/conda/lib/python3.6/site-packages (from ipywidgets>=5.1->fileupload) (7.4.0)\n",
      "Requirement already satisfied: widgetsnbextension~=3.4.0 in /opt/conda/lib/python3.6/site-packages (from ipywidgets>=5.1->fileupload) (3.4.2)\n",
      "Requirement already satisfied: six in /opt/conda/lib/python3.6/site-packages (from traitlets>=4.2->fileupload) (1.12.0)\n",
      "Requirement already satisfied: decorator in /opt/conda/lib/python3.6/site-packages (from traitlets>=4.2->fileupload) (4.3.2)\n",
      "Requirement already satisfied: MarkupSafe>=0.23 in /opt/conda/lib/python3.6/site-packages (from jinja2->notebook>=4.2->fileupload) (1.1.1)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /opt/conda/lib/python3.6/site-packages (from jupyter-client>=5.2.0->notebook>=4.2->fileupload) (2.8.0)\n",
      "Requirement already satisfied: jsonschema!=2.5.0,>=2.4 in /opt/conda/lib/python3.6/site-packages (from nbformat->notebook>=4.2->fileupload) (3.0.1)\n",
      "Requirement already satisfied: mistune>=0.8.1 in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (0.8.4)\n",
      "Requirement already satisfied: pygments in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (2.3.1)\n",
      "Requirement already satisfied: entrypoints>=0.2.2 in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (0.3)\n",
      "Requirement already satisfied: bleach in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (3.1.0)\n",
      "Requirement already satisfied: pandocfilters>=1.4.1 in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (1.4.2)\n",
      "Requirement already satisfied: testpath in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (0.4.2)\n",
      "Requirement already satisfied: defusedxml in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.2->fileupload) (0.5.0)\n",
      "Requirement already satisfied: setuptools>=18.5 in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (40.8.0)\n",
      "Requirement already satisfied: jedi>=0.10 in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.13.3)\n",
      "Requirement already satisfied: pickleshare in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.7.5)\n",
      "Requirement already satisfied: prompt_toolkit<2.1.0,>=2.0.0 in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (2.0.9)\n",
      "Requirement already satisfied: backcall in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.1.0)\n",
      "Requirement already satisfied: pexpect in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (4.6.0)\n",
      "Requirement already satisfied: attrs>=17.4.0 in /opt/conda/lib/python3.6/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat->notebook>=4.2->fileupload) (19.1.0)\n",
      "Requirement already satisfied: pyrsistent>=0.14.0 in /opt/conda/lib/python3.6/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat->notebook>=4.2->fileupload) (0.14.11)\n",
      "Requirement already satisfied: webencodings in /opt/conda/lib/python3.6/site-packages (from bleach->nbconvert->notebook>=4.2->fileupload) (0.5.1)\n",
      "Requirement already satisfied: parso>=0.3.0 in /opt/conda/lib/python3.6/site-packages (from jedi>=0.10->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.3.4)\n",
      "Requirement already satisfied: wcwidth in /opt/conda/lib/python3.6/site-packages (from prompt_toolkit<2.1.0,>=2.0.0->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.1.7)\n",
      "Requirement already satisfied: ptyprocess>=0.5 in /opt/conda/lib/python3.6/site-packages (from pexpect->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets>=5.1->fileupload) (0.6.0)\n",
      "Requirement already satisfied: ipywidgets in /opt/conda/lib/python3.6/site-packages (7.4.2)\n",
      "Requirement already satisfied: widgetsnbextension~=3.4.0 in /opt/conda/lib/python3.6/site-packages (from ipywidgets) (3.4.2)\n",
      "Requirement already satisfied: ipython>=4.0.0; python_version >= \"3.3\" in /opt/conda/lib/python3.6/site-packages (from ipywidgets) (7.4.0)\n",
      "Requirement already satisfied: traitlets>=4.3.1 in /opt/conda/lib/python3.6/site-packages (from ipywidgets) (4.3.2)\n",
      "Requirement already satisfied: ipykernel>=4.5.1 in /opt/conda/lib/python3.6/site-packages (from ipywidgets) (5.1.0)\n",
      "Requirement already satisfied: nbformat>=4.2.0 in /opt/conda/lib/python3.6/site-packages (from ipywidgets) (4.4.0)\n",
      "Requirement already satisfied: notebook>=4.4.1 in /opt/conda/lib/python3.6/site-packages (from widgetsnbextension~=3.4.0->ipywidgets) (5.7.5)\n",
      "Requirement already satisfied: setuptools>=18.5 in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (40.8.0)\n",
      "Requirement already satisfied: jedi>=0.10 in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.13.3)\n",
      "Requirement already satisfied: decorator in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (4.3.2)\n",
      "Requirement already satisfied: pickleshare in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.7.5)\n",
      "Requirement already satisfied: prompt_toolkit<2.1.0,>=2.0.0 in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (2.0.9)\n",
      "Requirement already satisfied: pygments in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (2.3.1)\n",
      "Requirement already satisfied: backcall in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.1.0)\n",
      "Requirement already satisfied: pexpect in /opt/conda/lib/python3.6/site-packages (from ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (4.6.0)\n",
      "Requirement already satisfied: ipython_genutils in /opt/conda/lib/python3.6/site-packages (from traitlets>=4.3.1->ipywidgets) (0.2.0)\n",
      "Requirement already satisfied: six in /opt/conda/lib/python3.6/site-packages (from traitlets>=4.3.1->ipywidgets) (1.12.0)\n",
      "Requirement already satisfied: tornado>=4.2 in /opt/conda/lib/python3.6/site-packages (from ipykernel>=4.5.1->ipywidgets) (6.0.2)\n",
      "Requirement already satisfied: jupyter-client in /opt/conda/lib/python3.6/site-packages (from ipykernel>=4.5.1->ipywidgets) (5.2.4)\n",
      "Requirement already satisfied: jsonschema!=2.5.0,>=2.4 in /opt/conda/lib/python3.6/site-packages (from nbformat>=4.2.0->ipywidgets) (3.0.1)\n",
      "Requirement already satisfied: jupyter_core in /opt/conda/lib/python3.6/site-packages (from nbformat>=4.2.0->ipywidgets) (4.4.0)\n",
      "Requirement already satisfied: Send2Trash in /opt/conda/lib/python3.6/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (1.5.0)\n",
      "Requirement already satisfied: prometheus-client in /opt/conda/lib/python3.6/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (0.6.0)\n",
      "Requirement already satisfied: terminado>=0.8.1 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (0.8.1)\n",
      "Requirement already satisfied: nbconvert in /opt/conda/lib/python3.6/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (5.4.1)\n",
      "Requirement already satisfied: jinja2 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (2.10)\n",
      "Requirement already satisfied: pyzmq>=17 in /opt/conda/lib/python3.6/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (18.0.1)\n",
      "Requirement already satisfied: parso>=0.3.0 in /opt/conda/lib/python3.6/site-packages (from jedi>=0.10->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.3.4)\n",
      "Requirement already satisfied: wcwidth in /opt/conda/lib/python3.6/site-packages (from prompt_toolkit<2.1.0,>=2.0.0->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.1.7)\n",
      "Requirement already satisfied: ptyprocess>=0.5 in /opt/conda/lib/python3.6/site-packages (from pexpect->ipython>=4.0.0; python_version >= \"3.3\"->ipywidgets) (0.6.0)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /opt/conda/lib/python3.6/site-packages (from jupyter-client->ipykernel>=4.5.1->ipywidgets) (2.8.0)\n",
      "Requirement already satisfied: attrs>=17.4.0 in /opt/conda/lib/python3.6/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat>=4.2.0->ipywidgets) (19.1.0)\n",
      "Requirement already satisfied: pyrsistent>=0.14.0 in /opt/conda/lib/python3.6/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat>=4.2.0->ipywidgets) (0.14.11)\n",
      "Requirement already satisfied: mistune>=0.8.1 in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (0.8.4)\n",
      "Requirement already satisfied: entrypoints>=0.2.2 in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (0.3)\n",
      "Requirement already satisfied: bleach in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (3.1.0)\n",
      "Requirement already satisfied: pandocfilters>=1.4.1 in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (1.4.2)\n",
      "Requirement already satisfied: testpath in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (0.4.2)\n",
      "Requirement already satisfied: defusedxml in /opt/conda/lib/python3.6/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (0.5.0)\n",
      "Requirement already satisfied: MarkupSafe>=0.23 in /opt/conda/lib/python3.6/site-packages (from jinja2->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (1.1.1)\n",
      "Requirement already satisfied: webencodings in /opt/conda/lib/python3.6/site-packages (from bleach->nbconvert->notebook>=4.4.1->widgetsnbextension~=3.4.0->ipywidgets) (0.5.1)\n",
      "Installing /opt/conda/lib/python3.6/site-packages/fileupload/static -> fileupload\n",
      "Up to date: /home/jovyan/.local/share/jupyter/nbextensions/fileupload/extension.js\n",
      "Up to date: /home/jovyan/.local/share/jupyter/nbextensions/fileupload/widget.js\n",
      "Up to date: /home/jovyan/.local/share/jupyter/nbextensions/fileupload/fileupload/widget.js\n",
      "- Validating: \u001b[32mOK\u001b[0m\n",
      "\n",
      "    To initialize this nbextension in the browser every time the notebook (or other app) loads:\n",
      "    \n",
      "          jupyter nbextension enable fileupload --user --py\n",
      "    \n",
      "Enabling notebook extension fileupload/extension...\n",
      "      - Validating: \u001b[32mOK\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "# Here are all the installs and imports you will need for your word cloud script and uploader widget\n",
    "\n",
    "!pip install wordcloud\n",
    "!pip install fileupload\n",
    "!pip install ipywidgets\n",
    "!jupyter nbextension install --py --user fileupload\n",
    "!jupyter nbextension enable --py fileupload\n",
    "\n",
    "import wordcloud\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "from IPython.display import display\n",
    "import fileupload\n",
    "import io\n",
    "import sys"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Whew! That was a lot. All of the installs and imports for your word cloud script and uploader widget have been completed. \n",
    "<br><br>\n",
    "**IMPORTANT!** If this was your first time running the above cell containing the installs and imports, you will need save this notebook now. Then under the File menu above,  select Close and Halt. When the notebook has completely shut down, reopen it. This is the only way the necessary changes will take affect.\n",
    "<br><br>\n",
    "To upload your text file, run the following cell that contains all the code for a custom uploader widget. Once you run this cell, a \"Browse\" button should appear below it. Click this button and navigate the window to locate your saved text file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d69c356903bd4acf9b583914a9dd18ed",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FileUploadWidget(label='Browse', _dom_classes=('widget_item', 'btn-group'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Uploaded `vassel_of_lode_start.txt` (132.34 kB)\n"
     ]
    }
   ],
   "source": [
    "# This is the uploader widget\n",
    "\n",
    "def _upload():\n",
    "\n",
    "    _upload_widget = fileupload.FileUploadWidget()\n",
    "\n",
    "    def _cb(change):\n",
    "        global file_contents\n",
    "        decoded = io.StringIO(change['owner'].data.decode('utf-8'))\n",
    "        filename = change['owner'].filename\n",
    "        print('Uploaded `{}` ({:.2f} kB)'.format(\n",
    "            filename, len(decoded.read()) / 2 **10))\n",
    "        file_contents = decoded.getvalue()\n",
    "\n",
    "    _upload_widget.observe(_cb, names='data')\n",
    "    display(_upload_widget)\n",
    "\n",
    "_upload()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The uploader widget saved the contents of your uploaded file into a string object named *file_contents* that your word cloud script can process. This was a lot of preliminary work, but you are now ready to begin your script. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a function in the cell below that iterates through the words in *file_contents*, removes punctuation, and counts the frequency of each word.  Oh, and be sure to make it ignore word case, words that do not contain all alphabets and boring words like \"and\" or \"the\".  Then use it in the `generate_from_frequencies` function to generate your very own word cloud!\n",
    "<br><br>\n",
    "**Hint:** Try storing the results of your iteration in a dictionary before passing them into wordcloud via the `generate_from_frequencies` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_frequencies(file_contents):\n",
    "    # Here is a list of punctuations and uninteresting words you can use to process your text\n",
    "    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n",
    "    uninteresting_words = [\"the\", \"a\", \"to\", \"if\", \"is\", \"it\", \"of\", \"and\", \"or\", \"an\", \"as\", \"i\", \"me\", \"my\", \\\n",
    "    \"we\", \"our\", \"ours\", \"you\", \"your\", \"yours\", \"he\", \"she\", \"him\", \"his\", \"her\", \"hers\", \"its\", \"they\", \"them\", \\\n",
    "    \"their\", \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"am\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\", \\\n",
    "    \"have\", \"has\", \"had\", \"do\", \"does\", \"did\", \"but\", \"at\", \"by\", \"with\", \"from\", \"here\", \"when\", \"where\", \"how\", \\\n",
    "    \"all\", \"any\", \"both\", \"each\", \"few\", \"more\", \"some\", \"such\", \"no\", \"nor\", \"too\", \"very\", \"can\", \"will\", \"just\"]\n",
    "    \n",
    "    # LEARNER CODE START HERE\n",
    "    word_list = file_contents.split(' ')\n",
    "    words = [word for word in word_list if uninteresting_words.count(word.lower()) == 0]\n",
    "    words_no_punct = [word for word in words if word.isalpha()]\n",
    "    \n",
    "    word_freq = {}\n",
    "    \n",
    "    for word in words_no_punct:\n",
    "        if word.lower() in word_freq:\n",
    "            word_freq[word.lower()] += 1\n",
    "        else: \n",
    "            word_freq[word.lower()] = 1\n",
    "    \n",
    "    sorted_words = {}\n",
    "    sorted_keys = sorted(word_freq, key=word_freq.get)\n",
    "    \n",
    "    for w in sorted_keys:\n",
    "        sorted_words[w] = word_freq[w]\n",
    "        \n",
    "    #wordcloud\n",
    "    cloud = wordcloud.WordCloud()\n",
    "    cloud.generate_from_frequencies(word_freq)\n",
    "    return cloud.to_array()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you have done everything correctly, your word cloud image should appear after running the cell below.  Fingers crossed!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Display your wordcloud image\n",
    "\n",
    "myimage = calculate_frequencies(file_contents)\n",
    "plt.imshow(myimage, interpolation = 'nearest')\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If your word cloud image did not appear, go back and rework your `calculate_frequencies` function until you get the desired output.  Definitely check that you passed your frequecy count dictionary into the `generate_from_frequencies` function of `wordcloud`. Once you have correctly displayed your word cloud image, you are all done with this project. Nice work!"
   ]
  }
 ],
 "metadata": {
  "coursera": {
   "course_slug": "python-crash-course",
   "graded_item_id": "Z5d28",
   "launcher_item_id": "eSjyd"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
